hydra:
  output_subdir: null  # disable creating .hydra directory
  run:
    dir: .  # disable output directory created by hydra
  job:
    chdir: false  # disable changing working directory

usr_config: null  # e.g. project_root/configs/user_configs/user_config1.yaml

defaults:
  - _self_  # import default.yaml itself
  - datasets: ???  # import dataset
  - override hydra/hydra_logging: disabled   # disable hydra logging because we will use wandb as our logger
  - override hydra/job_logging: disabled   # disable job logging because we will use wandb as our logger

################### Don't modify parameters above #######################

################### You can modify all parameters below #################

wandb:
  enable: true
  api_key: ???  # your wandb api key
  entity: ???  # the place to save your runs. can be your wandb username or team name
  project: ???  # the name of your project
  name: ???  # the name your run

train:  # only valid when running the training script
  epochs: 200
  lr: 0.1
  lr_scheduler:
    enable: true
    which: cosLR  # expLR, stepLR or cosLR
    expLR:
      gamma: 0.95
    stepLR:
      gamma: 0.2  # lr = gamma * lr, when decay step is hit
      decay_step: 50
    cosLR:
      T_max: ${train.epochs}  # maximum epochs
      eta_min: 1e-3  # minimum lr
  optimizer: sgd  # adamw or sgd
  validation_freq: 1  # frequency in epoch(s) to validate the model
  label_smoothing: true
  epsilon: 0.2  # epsilon for label smoothing
  dataloader:
    combine_trainval: true  # combine train and validation set as train set
    batch_size_per_gpu: 4  # the actual batch size should be batch_size_per_gpu * num_gpu
    num_workers: ${train.ddp.nproc_this_node}  # the number of subprocess to load data
    prefetch: ${train.dataloader.batch_size_per_gpu}  # samples to be prefetched. e.g. 64 means 64*num_workers samples to be prefetched
    pin_memory: true  # pin memory in RAM
  ddp:
    which_gpu: [0]
    syn_bn: true  # synchronize batch normalization among gpus
    master_addr: localhost  # don't change this if you use only one PC
    master_port: 12345  # please choose an available port
    nnodes: 1  # how many PCs you want to use
    nproc_this_node: 1  # how many gpu you want to use in current PC, should match 'which_gpu'
    rank_starts_from: 0  # don't change this if you use only one PC
    world_size: 1  # this is equal to 'nproc_this_node' if you only use one PC
  amp: true  # whether to use automatic mixed precision

test:  # only valid when running the test script
  which_gpu: [0]  # the name of the run you want to test
  pin_memory: true  # pin memory in RAM
  label_smoothing: true
  epsilon: 0.2  # epsilon for label smoothing
  dataloader:
    batch_size: 8
    shuffle: false
    num_workers: 16  # the number of subprocess to load data
    prefetch: ${test.dataloader.batch_size}  # samples to be prefetched. e.g. 64 means 64*num_workers samples to be prefetched

edgeconv_block:
  K: [32, 32, 32]
  xyz_or_feature: ['feature', 'feature', 'feature']  # select K neighbors according to xyz or current feature
  feature_or_diff: ['diff', 'diff', 'diff']  # use the features of K neighbors or use the difference between the given point and its K neighbors as cross attention input
  conv1_channel_in: [6, 128, 128]
  conv1_channel_out: [64, 64, 64]
  conv2_channel_in: [64, 64, 64]
  conv2_channel_out: [64, 64, 64]

point2neighbor_embedding:
  K: 32  # 3 values in the list means point2neighbor_block includes 3 point2neighbor layers. The 'K' for each layer is 32, 32 and 32 respectively
  xyz_or_feature: feature  # select K neighbors according to xyz or current feature
  feature_or_diff: diff  # use the features of K neighbors or use the difference between the given point and its K neighbors as cross attention input
  q_in: 3
  q_out: 32
  k_in: 3
  k_out: 32
  v_in: 3
  v_out: 64
  num_heads: 8

point2neighbor_block:
  enable: false  # if false, edgeconv block will be used
  point2neighbor:
    K: [32, 32, 32]  # 3 values in the list means point2neighbor_block includes 3 point2neighbor layers. The 'K' for each layer is 32, 32 and 32 respectively
    xyz_or_feature: ['feature', 'feature', 'feature']  # select K neighbors according to xyz or current feature
    feature_or_diff: ['diff', 'diff', 'diff']  # use the features of K neighbors or use the difference between the given point and its K neighbors as cross attention input
    q_in: [64, 64, 64]
    q_out: [64, 64, 64]
    k_in: [64, 64, 64]
    k_out: [64, 64, 64]
    v_in: [64, 64, 64]
    v_out: [64, 64, 64]
    num_heads: [8, 8, 8]
    ff_conv1_channels_in: [64, 64, 64]
    ff_conv1_channels_out: [128, 128, 128]
    ff_conv2_channels_in: [128, 128, 128]
    ff_conv2_channels_out: [64, 64, 64]

conv_block:
  channels_in: [192]
  channels_out: [1024]

point2point_block:
  enable: false  # if false, conv block will be used
  use_embedding: true
  embedding_channels_in: 192
  embedding_channels_out: 1024
  point2point:
    qkv_channels: [1024]
    ff_conv1_channels_in: [1024]
    ff_conv1_channels_out: [512]
    ff_conv2_channels_in: [512]
    ff_conv2_channels_out: [1024]

point2neighbor_multi_scale:
  enable: true

point2patch:
  enable: true